class MigrationService {
  private static readonly NEW_DOMAIN = 'https://www.isru-league.com';
  private static readonly MIGRATION_KEY = 'auto-migration-completed';
  
  /**
   * Verifica se il nuovo dominio √® raggiungibile e sicuro
   */
  sta      console.log('üì¶ Migrating critical data:');
      console.log('   - Username:', username);
      console.log('   - Friends League:', friendsLeague);
      
      if (!username) {
        console.warn('‚ö†Ô∏è No username found, performing redirect without migration data');
        window.location.assign(this.NEW_DOMAIN);
        return;
      }
      
      // Prepara i parametri per la migrazione
      const migrationParams = new URLSearchParams();
      migrationParams.set('migrate', 'true');
      migrationParams.set('username', encodeURIComponent(username));
      
      if (friendsLeague) {
        migrationParams.set('league', encodeURIComponent(friendsLeague));
      }
      
      // Aggiungi timestamp per evitare cache
      migrationParams.set('t', Date.now().toString());
      
      const redirectUrl = `${this.NEW_DOMAIN}?${migrationParams.toString()}`;
      
      console.log('üîÑ Redirecting with migration data...');
      console.log('üîÑ Redirect URL:', redirectUrl); verifyNewDomain(): Promise<boolean> {
    try {
      const response = await fetch(this.NEW_DOMAIN, { 
        method: 'HEAD',
        mode: 'no-cors' // Evita problemi CORS per la verifica
      });
      return true;
    } catch (error) {
      console.warn('‚ùå New domain verification failed:', error);
      return false;
    }
  }
  
  /**
   * Forza la migrazione rimuovendo i flag di completamento (per debug/testing)
   */
  static forceMigration(): void {
    console.log('üîß === FORCING MIGRATION ===');
    console.log('üîß Current domain:', window.location.hostname);
    
    const hasUsername = localStorage.getItem('isru-username') !== null;
    console.log('üîß Current username in localStorage:', localStorage.getItem('isru-username'));
    console.log('üîß Has username (needed for migration):', hasUsername);
    console.log('üîß shouldMigrate() returns:', this.shouldMigrate());
    
    // Se dovrebbe migrare, avvia subito la migrazione
    if (this.shouldMigrate()) {
      console.log('üîß Starting forced migration...');
      this.performMigration();
    } else {
      console.log('üîß Migration conditions not met - need username on old domain');
    }
  }

  /**
   * Reset completo per testing - rimuove TUTTI i dati e flag
   */
  static resetForTesting(): void {
    console.log('üß™ === COMPLETE RESET FOR TESTING ===');
    
    // Rimuovi tutti i flag di migrazione
    localStorage.removeItem(this.MIGRATION_KEY);
    localStorage.removeItem('migration-completed');
    
    // Rimuovi dati di test se esistono
    localStorage.removeItem('test-migration-flow');
    
    console.log('üß™ All migration flags and test data removed');
    console.log('üß™ Current shouldMigrate():', this.shouldMigrate());
  }

  /**
   * Controlla se siamo in ambiente locale
   */
  static isLocalEnvironment(): boolean {
    const hostname = window.location.hostname;
    return hostname === 'localhost' || hostname === '127.0.0.1' || hostname.startsWith('192.168.');
  }

  /**
   * Controlla se siamo sul vecchio dominio e se la migrazione √® necessaria
   */
  static shouldMigrate(): boolean {
    console.log('üîç === CHECKING IF SHOULD MIGRATE ===');
    console.log('üîç Current hostname:', window.location.hostname);
    console.log('üîç Current full URL:', window.location.href);
    
    // In locale, simula la migrazione solo se c'√® un flag specifico per testing
    if (this.isLocalEnvironment()) {
      console.log('üè† Local environment detected');
      const forceTestMigration = localStorage.getItem('test-migration-flow') === 'true';
      const hasUsername = localStorage.getItem('isru-username') !== null;
      
      console.log('üîç Local migration conditions:');
      console.log('   - Force test migration flag:', forceTestMigration);
      console.log('   - Has username:', hasUsername);
      
      const shouldMigrateLocal = forceTestMigration && hasUsername;
      console.log('üîç Local shouldMigrate result:', shouldMigrateLocal);
      return shouldMigrateLocal;
    }
    
    // Controlla se siamo sul dominio vecchio (non www.isru-league.com)
    const currentDomain = window.location.hostname;
    const isNewDomain = currentDomain === 'www.isru-league.com' || currentDomain === 'isru-league.com';
    const isOldDomain = !isNewDomain;
    
    // LOGICA SEMPLIFICATA: migra solo se:
    // 1. Siamo sul vecchio dominio
    // 2. NON abbiamo gi√† un username nel localStorage (non √® gi√† migrato)
    const hasUsername = localStorage.getItem('isru-username') !== null;
    
    console.log('üîç Production migration conditions:');
    console.log('   - Current domain:', currentDomain);
    console.log('   - Is new domain (isru-league.com):', isNewDomain);
    console.log('   - Is old domain (needs migration):', isOldDomain);
    console.log('   - Has username (already migrated):', hasUsername);
    
    // Migra solo se siamo sul vecchio dominio E abbiamo dati da migrare
    const shouldMigrateProduction = isOldDomain;
    console.log('üîç Production shouldMigrate result:', shouldMigrateProduction);
    
    return shouldMigrateProduction;
  }

  /**
   * Controlla se ci sono dati utente da migrare
   */
  private static hasUserDataToMigrate(): boolean {
    const importantKeys = [
      'isru-username',
      'friends-league',
      'user-goals',
      'isru-offline-data',
      'online-sessions',
      'isru-goals'
    ];
    
    // In locale, per testing, considera che ci sono dati se c'√® almeno un username
    if (this.isLocalEnvironment()) {
      return localStorage.getItem('isru-username') !== null;
    }
    
    return importantKeys.some(key => localStorage.getItem(key) !== null);
  }

  /**
   * Raccoglie tutti i dati utente per la migrazione - COPIA TUTTO IL LOCALSTORAGE
   */
  static gatherUserData(): Record<string, any> {
    const userData: Record<string, any> = {};
    
    console.log('üîç === STARTING MIGRATION DATA GATHERING ===');
    console.log('üîç Total localStorage keys found:', localStorage.length);
    
    // Prima mostra tutte le chiavi che esistono
    console.log('üîç All current localStorage keys:');
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key) {
        const value = localStorage.getItem(key);
        console.log(`   üìã Key: "${key}" -> Value: "${value?.substring(0, 50)}${value && value.length > 50 ? '...' : ''}"`);
      }
    }

    // Copia TUTTE le chiavi del localStorage senza filtri
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key) {
        const value = localStorage.getItem(key);
        if (value !== null) {
          userData[key] = value; // Mantieni come stringa per evitare problemi di parsing
          console.log(`‚úÖ COPIED: ${key} = ${value.substring(0, 100)}${value.length > 100 ? '...' : ''}`);
        }
      }
    }

    // Controlli specifici per i dati critici
    console.log('üîç === CRITICAL DATA CHECK ===');
    console.log('üîç isru-username:', localStorage.getItem('isru-username'));
    console.log('üîç friends-league:', localStorage.getItem('friends-league'));
    console.log('üîç Username in userData:', userData['isru-username']);
    console.log('üîç Friends-league in userData:', userData['friends-league']);

    // Aggiungi metadati sulla migrazione
    userData._migrationMeta = JSON.stringify({
      timestamp: new Date().toISOString(),
      fromDomain: window.location.hostname,
      userAgent: navigator.userAgent,
      version: '3.0',
      totalKeys: Object.keys(userData).length - 1 // -1 per escludere _migrationMeta
    });

    console.log('üìã === FINAL MIGRATION DATA ===');
    console.log('üìã Total data copied:', Object.keys(userData).length - 1, 'keys');
    console.log('üìã All keys to migrate:', Object.keys(userData).filter(k => k !== '_migrationMeta'));
    console.log('üìã Complete userData object:', userData);
    
    return userData;
  }

  /**
   * Simula la migrazione in ambiente locale (per testing)
   */
  static async simulateLocalMigration(): Promise<void> {
    // Raccoglie i dati utente
    const userData = this.gatherUserData();
    
    // Simula l'encoding/decoding che avverrebbe nella migrazione reale
    const encodedData = btoa(JSON.stringify(userData));
    console.log('üß™ Local simulation: Migration data encoded');
    
    // Simula un delay come se stessimo migrando
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Simula l'import dei dati
    const decodedData = JSON.parse(atob(encodedData));
    console.log('üß™ Local simulation: Migration data decoded and verified');
    
    // Marca la migrazione come completata per il test
    localStorage.setItem(this.MIGRATION_KEY, 'true');
    localStorage.setItem('migration-completed', JSON.stringify({
      timestamp: new Date().toISOString(),
      fromDomain: 'localhost-simulation',
      userAgent: navigator.userAgent,
      version: '3.0',
      isSimulation: true
    }));
    
    console.log('‚úÖ Local migration simulation completed successfully!');
  }

  /**
   * Esegue la migrazione automatica verso il nuovo dominio - REDIRECT SEMPLICE
   */
  static async performMigration(): Promise<void> {
    console.log('üöÄ === STARTING PERFORM MIGRATION (SIMPLE REDIRECT) ===');
    console.log('üöÄ Current URL:', window.location.href);
    console.log('üöÄ Current domain:', window.location.hostname);
    
    try {
      // Se siamo in locale, simula la migrazione senza redirect
      if (this.isLocalEnvironment()) {
        console.log('üè† Local environment detected - simulating migration');
        await this.simulateLocalMigration();
        return;
      }

      // Verifica che il nuovo dominio sia raggiungibile
      console.log('üîç Verifying new domain accessibility...');
      const isDomainAccessible = await this.verifyNewDomain();
      
      if (!isDomainAccessible) {
        console.warn('‚ö†Ô∏è New domain not accessible, postponing migration');
        return;
      }

      // Mostra i dati che verranno migrati
      console.log('üì¶ Current user data that will be available on new domain:');
      const username = localStorage.getItem('isru-username');
      const friendsLeague = localStorage.getItem('friends-league');
      console.log('   - Username:', username);
      console.log('   - Friends League:', friendsLeague);
      
      console.log('ÔøΩ Performing simple redirect to new domain...');
      console.log('üîÑ User will need to set up profile again on new domain');
      
      // Piccolo delay per assicurarsi che tutto sia salvato
      await new Promise(resolve => setTimeout(resolve, 100));
      
      console.log('üîÑ Redirecting now...');
      window.location.assign(this.NEW_DOMAIN);
      
    } catch (error) {
      console.error('Migration failed:', error);
      // Fallback: reindirizza senza dati ma in modo sicuro
      console.log('üîÑ Falling back to basic redirect...');
      window.location.assign(this.NEW_DOMAIN);
    }
  }

  /**
   * IMPORTAZIONE ELIMINATA - Non serve pi√π
   * Sul nuovo dominio l'utente ripartir√† con localStorage vuoto
   */
  static importMigratedData(): boolean {
    console.log('ÔøΩ === MIGRATION IMPORT NOT NEEDED ===');
    console.log('ÔøΩ Users will start fresh on new domain');
    console.log('üîç URL params:', window.location.search);
    
    // Sul nuovo dominio, nessuna importazione necessaria
    // L'utente ripartir√† con localStorage vuoto
    return false;
  }

  /**
   * Mostra una notifica di migrazione completata
   */
  static showMigrationSuccess(): void {
    const migrationMeta = localStorage.getItem('migration-completed');
    if (migrationMeta) {
      try {
        const meta = JSON.parse(migrationMeta);
        console.log(`üéâ Welcome to the new domain! Data migrated from ${meta.fromDomain} on ${new Date(meta.timestamp).toLocaleString()}`);
        
        // Rimuovi i metadati dopo aver mostrato il messaggio
        setTimeout(() => {
          localStorage.removeItem('migration-completed');
        }, 5000);
      } catch (error) {
        console.error('Error reading migration metadata:', error);
      }
    }
  }

  /**
   * Mostra lo stato attuale della migrazione (per debug)
   */
  static debugMigrationStatus(): void {
    console.log('üîß === MIGRATION DEBUG STATUS ===');
    console.log('üîß Current domain:', window.location.hostname);
    console.log('üîß Current URL:', window.location.href);
    console.log('üîß Is local environment:', this.isLocalEnvironment());
    
    const currentDomain = window.location.hostname;
    const isNewDomain = currentDomain === 'www.isru-league.com' || currentDomain === 'isru-league.com';
    const isOldDomain = !isNewDomain;
    const hasUsername = localStorage.getItem('isru-username') !== null;
    
    console.log('üîß Domain analysis:');
    console.log('   - Is new domain:', isNewDomain);
    console.log('   - Is old domain:', isOldDomain);
    console.log('   - Has username:', hasUsername);
    console.log('   - Username value:', localStorage.getItem('isru-username'));
    
    console.log('üîß Should migrate:', this.shouldMigrate());
    console.log('üîß All localStorage keys:', Object.keys(localStorage));
    console.log('üîß === END DEBUG STATUS ===');
  }
}

// Esponi il MigrationService globalmente per debugging in produzione
if (typeof window !== 'undefined') {
  (window as any).MigrationService = MigrationService;
  console.log('üîß MigrationService exposed globally for debugging');
}

export default MigrationService;
